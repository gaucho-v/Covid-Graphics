{"version":3,"sources":["components/Recharts/Recharts.tsx","components/UI/Loader/Loader.js","components/App.js","index.tsx"],"names":["SimpleLineChart","placeData","dateFromPlaceData","map","el","date","slice","index","Object","assign","width","height","data","dataKey","strokeDasharray","type","stroke","r","Loader","className","App","state","cities","search","handleChangeInput","target","value","handleAddPlace","axios","get","then","dataString","jsn","substring","indexOf","JSON","parse","setState","countries","find","en","catch","f","this","statistics","lastData","Container","GlobalStyle","isUpdate","length","confirmed","DataAlertHeading","Graphics","place","cityData","toUpperCase","placeName","RelativeForGraphics","key","PlaceName","LastStatistic","cured","deaths","Component","createGlobalStyle","styled","div","h2","h4","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f317f1e.chunk.js","sourcesContent":["import React from 'react'\r\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip} from 'recharts';\r\n\r\n\r\n\r\nconst SimpleLineChart = ({placeData} : any)  => {\r\n    const dateFromPlaceData = placeData.map((el: any) => el.date.slice(5,10));\r\n    placeData = placeData.map((el: any,index : number) => Object.assign(el, {date : dateFromPlaceData[index]}));\r\n\r\n    return (\r\n    <LineChart width={450} height={240} data={placeData}>\r\n      <XAxis dataKey='date'/>\r\n      <YAxis width={75}/>\r\n      <CartesianGrid strokeDasharray=\"0.5 1\"/>\r\n      <Tooltip/>\r\n      <Line type=\"monotone\" dataKey=\"confirmed\" stroke=\"red\" r={1}/>\r\n      <Line type=\"monotone\" dataKey=\"cured\" stroke=\"#82ca9d\" r={1}/>\r\n      <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"black\"  r={1} />\r\n    </LineChart>\r\n  )\r\n};\r\n\r\nexport default SimpleLineChart;","import React from 'react';\r\nimport './Loader.css'\r\n\r\nconst Loader = () => (\r\n  <div className='loader'>\r\n    <h3>Пожалуйста, подождите...</h3>\r\n    <div className=\"lds-spinner\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Loader","import React, {Component} from 'react';\r\nimport styled, {createGlobalStyle} from 'styled-components';\r\nimport SimpleLineChart from \"./Recharts/Recharts\";\r\nimport axios from 'axios'\r\nimport Loader from \"./UI/Loader/Loader\";\r\n\r\n// Некоторые области надо писать только на русском.\r\n\r\nconst API_URL = 'https://cors-anywhere.herokuapp.com/coronavirus-monitor.ru/jquery-lite-9.js?a=12';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        data: [],\r\n        cities: ['Russia','Moscow','Saint Petersburg','Voronezh region','Белгородская область', 'Калининградская область','Ukraine', 'Belarus', 'USA'],\r\n        search: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios.get(API_URL).then(({data: dataString}) => {\r\n            const jsn = dataString.substring(dataString.indexOf('{'));\r\n            const data = JSON.parse(jsn);\r\n\r\n            this.setState({\r\n                data: [...data.cities.data.cities, data.countries.data.countries.find((el) => el.en === 'Russia')],\r\n            });\r\n        }).catch(f => f)\r\n    }\r\n\r\n    handleChangeInput = ({target: {value}}) => {\r\n        // this.setState({\r\n        //     search: value\r\n        // })\r\n    };\r\n\r\n    handleAddPlace = () => {\r\n        // const namePlaceForSearch = this.state.data.map((el) => el.en.toUpperCase());\r\n        // const index = namePlaceForSearch.indexOf(this.state.search.toUpperCase());\r\n        // if(index >= 0) {\r\n        //     console.log('Такое место есть');\r\n        //     this.setState({\r\n        //         cities: [this.state.search, ...this.state.cities]\r\n        //     });\r\n        //     console.log(this.state.cities)\r\n        // }\r\n        // else {\r\n        //     console.log('Неправильно введен город')\r\n        // }\r\n    };\r\n\r\n    render() {\r\n        const {data,search,cities} = this.state;\r\n        const {statistics} = data.find((el) => el.en === 'Moscow') || {};\r\n        const lastData = statistics;\r\n        if (!statistics) {\r\n            return (\r\n              <Container>\r\n                  <GlobalStyle/>\r\n                  <Loader/>\r\n              </Container>\r\n            )\r\n        }\r\n        const isUpdate = lastData[lastData.length-1].confirmed - lastData[lastData.length-2].confirmed;\r\n        return (\r\n            <Container>\r\n                <GlobalStyle/>\r\n                {/*<input value={search} onChange={this.handleChangeInput}></input>*/}\r\n                {/*<button onClick={this.handleAddPlace}>Add place</button>*/}\r\n                {!isUpdate ?  <DataAlertHeading>Данных за {lastData[lastData.length-1].date.slice(5,10)} ещё нет</DataAlertHeading> : null}\r\n                <Graphics>\r\n                    {cities.map((place, index) => {\r\n                        const cityData = data.find(el => el.en.toUpperCase() === place.toUpperCase());\r\n                        if (!cityData) {\r\n                            return null\r\n                        }\r\n                        const {statistics} = cityData;\r\n                        let placeName = place.toUpperCase();\r\n                        if (place === 'Белгородская область') {\r\n                             placeName = 'BELGOROD'\r\n                        }\r\n                        if (place === 'Калининградская область') {\r\n                            placeName = '(NEW) KALININGRAD'\r\n                        }\r\n\r\n                        return (\r\n                            <RelativeForGraphics key={`${index}.${place}`}>\r\n                                <PlaceName> {placeName} </PlaceName>\r\n                                <LastStatistic>\r\n                                    <p>Last data:</p>\r\n                                    {isUpdate ? <>\r\n                                            <div>{statistics[statistics.length-1].confirmed - statistics[statistics.length-2].confirmed} confirmed</div>\r\n                                            <div>{statistics[statistics.length-1].cured - statistics[statistics.length-2].cured} cured</div>\r\n                                            <div>{statistics[statistics.length-1].deaths - statistics[statistics.length-2].deaths} d</div>\r\n                                        </> :\r\n                                        <>\r\n                                            <div>{statistics[statistics.length-2].confirmed - statistics[statistics.length-3].confirmed} confirmed</div>\r\n                                            <div>{statistics[statistics.length-2].cured - statistics[statistics.length-3].cured} cured</div>\r\n                                            <div>{statistics[statistics.length-2].deaths - statistics[statistics.length-3].deaths} d</div>\r\n                                        </>}\r\n                                </LastStatistic>\r\n                                <SimpleLineChart\r\n                                    placeData={statistics}/>\r\n                            </RelativeForGraphics>\r\n                        )\r\n                    })\r\n                    }\r\n                </Graphics>\r\n            </Container>\r\n        )\r\n    }\r\n};\r\n\r\nexport default App\r\n\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  @import url(\"https://fonts.googleapis.com/css?family=Inconsolata&display=swap\");\r\n  body {\r\n    background-color: #eee;\r\n    font-family: 'Inconsolata', monospace;\r\n    height: auto;\r\n    @media (max-width: 1024px) {\r\n      background: none;\r\n    }\r\n  };\r\n`;\r\n\r\nconst Container = styled.div`\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n  border: 2px solid #eee;\r\n  border-radius: 7px;\r\n  padding-right: 15px;\r\n  background-color: white;\r\n  \r\n  \r\n  @media (max-width: 1024px) {\r\n        width: 100%;\r\n        border: none;\r\n        padding: 0;\r\n    }\r\n`;\r\nconst Graphics = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst DataAlertHeading = styled.h2`\r\n  text-align: center;\r\n  color: darkred;\r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst RelativeForGraphics = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst PlaceName = styled.h4`\r\n  text-align: center;\r\n  color: #808088;\r\n`;\r\n\r\nconst LastStatistic = styled.div`\r\n    position: absolute;\r\n    display: flex;\r\n    background: cornsilk;\r\n    top: 24%;\r\n    left: 20%;\r\n    flex-direction: column;\r\n    padding: 5px;\r\n    border: 2px solid #eee;\r\n    border-radius: 7px;\r\n    color: #b5bbbb;\r\n    \r\n`;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./components/App\";\r\n\r\n\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"));"],"sourceRoot":""}