{"version":3,"sources":["components/Recharts/Recharts.tsx","components/App.js","index.tsx"],"names":["SimpleLineChart","placeData","dateFromPlaceData","map","el","date","slice","index","Object","assign","width","height","data","dataKey","strokeDasharray","type","stroke","r","GlobalStyle","createGlobalStyle","Container","styled","div","Graphics","DataAlertHeading","h2","RelativeForGraphics","PlaceName","h4","LastStatistic","cities","App","state","axios","get","then","dataString","jsn","substring","indexOf","JSON","parse","setState","catch","f","this","statistics","find","en","lastData","isUpdate","length","confirmed","place","cityData","key","toUpperCase","cured","deaths","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54459ed5.chunk.js","sourcesContent":["import React from 'react'\r\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip} from 'recharts';\r\n\r\n\r\n\r\nconst SimpleLineChart = ({placeData} : any)  => {\r\n    const dateFromPlaceData = placeData.map((el: any) => el.date.slice(5,10));\r\n    placeData = placeData.map((el: any,index : number) => Object.assign(el, {date : dateFromPlaceData[index]}));\r\n\r\n    return (\r\n    <LineChart width={300} height={300} data={placeData}>\r\n      <XAxis dataKey='date'/>\r\n      <YAxis/>\r\n      <CartesianGrid strokeDasharray=\"0.5 1\"/>\r\n      <Tooltip/>\r\n      <Line type=\"monotone\" dataKey=\"confirmed\" stroke=\"red\" r={1}/>\r\n      <Line type=\"monotone\" dataKey=\"cured\" stroke=\"#82ca9d\" r={1}/>\r\n      <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"black\"  r={1} />\r\n    </LineChart>\r\n  )\r\n};\r\n\r\nexport default SimpleLineChart;","import React, {Component} from 'react';\r\nimport styled, {createGlobalStyle} from 'styled-components';\r\nimport SimpleLineChart from \"./Recharts/Recharts\";\r\nimport axios from 'axios'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  @import url('https://fonts.googleapis.com/css?family=Roboto&display=swap');\r\n  body {\r\n    background-color: #eee;\r\n    font-family: \"Roboto\", sans-serif;\r\n  };\r\n`\r\n\r\n\r\n\r\nconst Container = styled.div`\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  border: 2px solid #eee;\r\n  border-radius: 7px;\r\n  padding: 0 15px;\r\n  background-color: white;\r\n`;\r\n\r\nconst Graphics = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`\r\n\r\nconst DataAlertHeading = styled.h2`\r\n  text-align: center;\r\n  color: darkred;\r\n  text-transform: uppercase;\r\n`\r\n\r\n\r\nconst RelativeForGraphics = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst PlaceName = styled.h4`\r\n  text-align: center;\r\n  color: #808088;\r\n`;\r\n\r\nconst LastStatistic = styled.div`\r\n    position: absolute;\r\n    display: flex;\r\n    background: cornsilk;\r\n    top: 20%;\r\n    left: 25%;\r\n    flex-direction: column;\r\n    padding: 5px;\r\n    border: 2px solid #eee;\r\n    border-radius: 7px;\r\n    color: #b5bbbb;\r\n    \r\n`;\r\n\r\n// Некоторые области надо писать только на русском.\r\nconst cities = [ 'Moscow','Saint Petersburg','Voronezh region','Белгородская область', 'Ukraine', 'Belarus', 'USA', 'Spain',];\r\n\r\nconst API_URL = 'https://cors-anywhere.herokuapp.com/coronavirus-monitor.ru/jquery-lite-9.js?a=12';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        data: []\r\n    }\r\n    componentDidMount() {\r\n        axios.get(API_URL).then(({data: dataString}) => {\r\n            const jsn = dataString.substring(dataString.indexOf('{'));\r\n            const data = JSON.parse(jsn);\r\n            this.setState({data: data.cities.data.cities})\r\n        }).catch(f => f)\r\n    }\r\n\r\n    render() {\r\n        const {data} = this.state;\r\n        const {statistics} = data.find((el) => el.en === 'Moscow') || {};\r\n        const lastData = statistics;\r\n        if (!statistics) {\r\n            return  null\r\n        }\r\n        const isUpdate = lastData[lastData.length-1].confirmed - lastData[lastData.length-2].confirmed;\r\n\r\n\r\n        return (\r\n            <Container>\r\n                test\r\n                <GlobalStyle/>\r\n                {!isUpdate ?  <DataAlertHeading>Данных за {lastData[lastData.length-1].date.slice(5,10)} ещё нет</DataAlertHeading> : null}\r\n                <Graphics>\r\n                    {cities.map((place, index) => {\r\n                        const cityData = data.find(el => el.en === place);\r\n                        if (!cityData) {\r\n                            return null\r\n                        }\r\n                        const {statistics} = cityData;\r\n                        return (\r\n                            <RelativeForGraphics key={`${index}.${place}`}>\r\n                                <PlaceName> {place.toUpperCase()} </PlaceName>\r\n                                <LastStatistic>\r\n                                    <p>Last data:</p>\r\n                                    {isUpdate ? <>\r\n                                            <div>{statistics[statistics.length-1].confirmed - statistics[statistics.length-2].confirmed} confirmed</div>\r\n                                            <div>{statistics[statistics.length-1].cured - statistics[statistics.length-2].cured} cured</div>\r\n                                            <div>{statistics[statistics.length-1].deaths - statistics[statistics.length-2].deaths} d</div>\r\n                                        </> :\r\n                                        <>\r\n                                            <div>{statistics[statistics.length-2].confirmed - statistics[statistics.length-3].confirmed} confirmed</div>\r\n                                            <div>{statistics[statistics.length-2].cured - statistics[statistics.length-3].cured} cured</div>\r\n                                            <div>{statistics[statistics.length-2].deaths - statistics[statistics.length-3].deaths} d</div>\r\n                                        </>}\r\n                                </LastStatistic>\r\n                                <SimpleLineChart\r\n                                    placeData={statistics}/>\r\n                            </RelativeForGraphics>\r\n                        )\r\n                    })\r\n                    }\r\n                </Graphics>\r\n            </Container>\r\n        )\r\n    }\r\n};\r\nexport default App\r\n\r\n\r\n\r\n\r\n","import React, {Fragment} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./components/App\";\r\n\r\n\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"));"],"sourceRoot":""}